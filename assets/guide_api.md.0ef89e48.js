import{_ as e,o as a,c as o,Q as t}from"./chunks/framework.68de6d59.js";const q=JSON.parse('{"title":"API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api.md","filePath":"guide/api.md","lastUpdated":1698072082000}'),r={name:"guide/api.md"},c=t('<h1 id="api-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#api-文档" aria-label="Permalink to &quot;API 文档&quot;">​</a></h1><h2 id="createrouter" tabindex="-1">createRouter <a class="header-anchor" href="#createrouter" aria-label="Permalink to &quot;createRouter&quot;">​</a></h2><p>▸ createRouter(options): <code>Router</code></p><p>创建一个可以被 Vue 应用使用的 Router 实例。</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>options</td><td><code>RouterOptions</code></td><td><code>RouterOptions</code></td></tr></tbody></table><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p><code>Router</code></p><h2 id="userouter" tabindex="-1">useRouter <a class="header-anchor" href="#userouter" aria-label="Permalink to &quot;useRouter&quot;">​</a></h2><p>▸ useRouter(): <code>Router</code></p><p>返回路由器实例。相当于在模板中使用 $Router。</p><blockquote><p>不可以脱离 Vue 上下文使用</p></blockquote><h3 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p><code>Router</code></p><h2 id="useroute" tabindex="-1">useRoute <a class="header-anchor" href="#useroute" aria-label="Permalink to &quot;useRoute&quot;">​</a></h2><p>▸ useRoute(): <code>Route</code></p><p>返回当前的路由地址信息。相当于在模板中使用 $Route。</p><blockquote><p>不可以脱离 Vue 上下文使用，且只能在页面<code>mount</code>之后才可与使用。当使用场景为外部链接跳转进入或H5页面刷新时，默认从当前链接中取得query参数并放在<code>Route</code>的<code>query</code>字段中，这种场景建议走<code>onLoad</code>声明周期获取参数。</p></blockquote><h3 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p><code>Route</code></p><h2 id="router实例方法" tabindex="-1">Router实例方法 <a class="header-anchor" href="#router实例方法" aria-label="Permalink to &quot;Router实例方法&quot;">​</a></h2><h3 id="push方法" tabindex="-1">push方法 <a class="header-anchor" href="#push方法" aria-label="Permalink to &quot;push方法&quot;">​</a></h3><p>▸ router.push(target:RouteLocationRaw): void</p><p>保留当前页面，跳转到应用内的某个页面，相当于使用 <code>uni.navigateTo(OBJECT)</code>。</p><h3 id="pushtab方法" tabindex="-1">pushTab方法 <a class="header-anchor" href="#pushtab方法" aria-label="Permalink to &quot;pushTab方法&quot;">​</a></h3><p>▸ router.pushTab(target:RouteLocationRaw): void</p><p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面，相当于使用 <code>uni.switchTab(OBJECT)</code>。</p><h3 id="replace方法" tabindex="-1">replace方法 <a class="header-anchor" href="#replace方法" aria-label="Permalink to &quot;replace方法&quot;">​</a></h3><p>▸ router.replace(target:RouteLocationRaw): void</p><p>关闭当前页面，跳转到应用内的某个页面，相当于使用 <code>uni.redirectTo(OBJECT)</code>。</p><h3 id="replaceall方法" tabindex="-1">replaceAll方法 <a class="header-anchor" href="#replaceall方法" aria-label="Permalink to &quot;replaceAll方法&quot;">​</a></h3><p>▸ router.replaceAll(target:RouteLocationRaw): void</p><p>关闭所有页面，打开到应用内的某个页面，相当于使用 <code>uni.reLaunch(OBJECT)</code>。</p><h3 id="back方法" tabindex="-1">back方法 <a class="header-anchor" href="#back方法" aria-label="Permalink to &quot;back方法&quot;">​</a></h3><p>▸ router.back(level?: number): void</p><p>关闭当前页面，返回上一页面或多级页面，相当于使用 <code>uni.navigateBack(OBJECT)</code>。</p>',36),u=[c];function d(i,h,l,p,n,s){return a(),o("div",null,u)}const R=e(r,[["render",d]]);export{q as __pageData,R as default};
